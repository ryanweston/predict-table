datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model League {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  logo      String   @db.VarChar(255)
  teams     Team[]
  tables    Table[]
  seasons   Season[]
  maxTeams  Int
  promotion Json?
  championsLeague Json?
  europaLeague Json?
  conferenceLeague Json?
  relegation Json?
}

model Team {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  Int
  name      String   @db.VarChar(255)
  logo      String   @db.VarChar(255)
  position  Int
  gamesPlayed Int
  points    Int
}

model Table {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     
  league    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId  Int
  seasonId  Int     
  title     String   @db.VarChar(255)
  positions Int
  points    Int?
}

model Season {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  league    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId  Int
  leagueStart DateTime
  leagueEnd DateTime 
  name      String   @db.VarChar(255)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  access_token       String? @db.Text
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  tables        Table[]
  accounts      Account[]
  sessions      Session[]
}
